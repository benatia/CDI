----------------------------------------------------------------------------------------
------------------------------sql phase 1  algebre relationnel ---------->sql

--------------creation des tables 

create table HOTEL
(
  nu_hotel number (10,0) not null enable,
  nom_hotel varchar2(25 byte) not null enable ,
  nu_type number (10,0) not null enable
  );
  
CREATE TABLE CHAMBRE 
(
nu_chambre number(10,0) not null enable,
nu_hotel number (10,0) not null enable ,
nu_cat number (10,0) not null enable 
);

CREATE TABLE CATEGORIE 
(
nu_cat number (10,0) not null enable ,
nom_cat varchar2 (25 byte) not null
);

CREATE TABLE TYPE1 
  (nu_type number (10,0) not null enable, 
  nom_type varchar2(25 byte) not null enable 
  );
  
----------cl�s primaires 

alter table HOTEL 
ADD CONSTRAINT PK_HOTEL PRIMARY KEY (nu_hotel);

alter table chambre 
ADD CONSTRAINT PK_CHAMBRE PRIMARY KEY (nu_chambre);

alter table CATEGORIE 
ADD CONSTRAINT PK_CATEGORIE PRIMARY KEY (nu_cat);

alter table TYPE1
ADD CONSTRAINT PK_TYPE1 PRIMARY KEY (nu_type);


---------------cl�s �trangers

alter table HOTEL 
ADD CONSTRAINT FK_HOTEL_TYPE1  FOREIGN  KEY (nu_type)
references TYPE1 (nu_type);

alter table chambre 
ADD CONSTRAINT PK_CHAMBRE_HOTEL FOREIGN KEY (nu_hotel)
references HOTEL (nu_hotel);

alter table chambre 
ADD CONSTRAINT PK_CHAMBRE_CATEGORIE  FOREIGN KEY (nu_cat)
references CATEGORIE (nu_cat);
------------------------------------------------------------------------
------------------------------------------------------------------------
---------------------upper -----------------------------------------
-----------------Noms de tous les h�tels-----
SELECT nom_hotel FROM HOTEL ;

----------Noms des h�tels poss�dant des chambres de la cat�gorie LUXE----
SELECT nom_hotel FROM 
HOTEL INNER JOIN CHAMBRE ON  HOTEL.NU_HOTEL =CHAMBRE.NU_HOTEL
INNER JOIN CATEGORIE ON CHAMBRE.NU_CAT= CATEGORIE.NU_CAT
WHERE CATEGORIE.NOM_CAT LIKE 'LUXE';

-------Noms des h�tels du type �3 �toiles � poss�dant des chambres de la cat�gorie LUXE---

SELECT nom_hotel FROM 
TYPE1 INNER JOIN HOTEL ON TYPE1.NU_TYPE = HOTEL.NU_TYPE 
INNER JOIN CHAMBRE ON  HOTEL.NU_HOTEL =CHAMBRE.NU_HOTEL
INNER JOIN CATEGORIE ON CHAMBRE.NU_CAT= CATEGORIE.NU_CAT
WHERE CATEGORIE.NOM_CAT LIKE 'LUXE'
AND TYPE1.NOM_TYPE LIKE '3 �toiles';

----------------Cat�gories des chambres de l�h�tel AU BON SEJOUR-----
SELECT NOM_CAT FROM 
CATEGORIE INNER JOIN CHAMBRE ON CATEGORIE.NU_CAT = CHAMBRE.NU_CAT
INNER JOIN HOTEL ON CHAMBRE.NU_CHAMBRE =HOTEL.NU_HOTEL
WHERE  HOTEL.NOM_HOTEL LIKE 'BON SEJOUR';



--------------------SCHEMA AVEC ASSOCIATION ---------------

---------------------------cr�ation des tables --------------
---------------suprission d'une table 
DROP TABLE CHEVAL;
DROP TABLE COURSE;
DROP TABLE CHEVAL_COURSE;

create table CHEVAL
(
nu_cheval NUMBER (10,0) NOT NULL ENABLE ,
nom_cheval VARCHAR2 (25 BYTE ) NOT NULL ENABLE,
age_cheval NUMBER (10,0) NOT NULL ENABLE 
);
CREATE TABLE COURSE 
(nu_course NUMBER (10,0)NOT NULL,
nom_course VARCHAR2(25 BYTE) NOT NULL,
date_course DATE NOT NULL 
);
CREATE TABLE CHEVAL_COURSE 
(nu_cheval NUMBER (10,0) NOT NULL,
nu_course NUMBER (10,0)NOT NULL,
rang_course NUMBER (10,0) NOT NULL
);

----------*CLES PRIMAIRES 

ALTER TABLE CHEVAL ADD CONSTRAINT PK_CHEVAL PRIMARY KEY (nu_cheval);
ALTER TABLE COURSE ADD CONSTRAINT PK_COURSE  PRIMARY KEY (nu_course);
ALTER TABLE CHEVAL_COURSE ADD CONSTRAINT PK_CHEVAL_COURSE PRIMARY KEY (nu_cheval,nu_course);

-----------------CLES ETRANGERS 

ALTER TABLE CHEVAL_COURSE 
ADD CONSTRAINT FK_CHEVAL_COURSE FOREIGN KEY (nu_cheval) REFERENCES CHEVAL (nu_cheval);

ALTER TABLE CHEVAL_COURSE 
ADD CONSTRAINT FK_COURSE_CHEVAL FOREIGN KEY (nu_course) REFERENCES COURSE (nu_course);
ALTER TABLE COURSE MODIFY (DATE_COURSE DEFAULT SYSDATE);


-----------Noms des chevaux ayant particip� � la course du 18/3/00
SELECT nom_cheval 
FROM CHEVAL INNER JOIN CHEVAL_COURSE ON CHEVAL.NU_CHEVAL=CHEVAL_COURSE.NU_CHEVAL
INNER JOIN COURSE ON CHEVAL_COURSE.NU_COURSE = COURSE.NU_COURSE 
WHERE COURSE.DATE_COURSE='2000-08-03';

--------------Nom du cheval ayant gagn� la course du 18/3/00---------

SELECT CHEVAL.NOM_CHEVAL
FROM CHEVAL INNER JOIN CHEVAL_COURSE ON CHEVAL.NU_CHEVAL=CHEVAL_COURSE.NU_CHEVAL
INNER JOIN COURSE ON CHEVAL_COURSE.NU_COURSE = COURSE.NU_COURSE 
WHERE  COURSE.DATE_COURSE='2000-08-03'
AND CHEVAL_COURSE.RANG_COURSE=1;

------------------Age et rang des chevaux du tierc� gagnant de la course du 18/3/00---
SELECT CHEVAL.AGE_CHEVAL ,CHEVAL_COURSE.RANG_COURSE
FROM CHEVAL INNER JOIN CHEVAL_COURSE ON CHEVAL.NU_CHEVAL=CHEVAL_COURSE.NU_CHEVAL
INNER JOIN COURSE ON CHEVAL_COURSE.NU_COURSE = COURSE.NU_COURSE 
WHERE COURSE.NOM_COURSE LIKE 'TIERCE';

-------------------------------SCHEMA AVEC CIRCUIT----------------------------------------
---------------------SUPPRISSION 
DROP TABLE VOYAGE;
---------------------CREATION DES TABLES 


CREATE TABLE VOYAGE (
NU_VOY NUMBER (10,0)NOT NULL,
NBRE_PARTICIPANT_VOY NUMBER (10,0) NOT NULL,
DATE_DEPT_VOY DATE NOT NULL,
REF_DES_VOY NUMBER (10,0) NOT NULL,
REF_CLA_VOY NUMBER (10,0) NOT NULL
);

CREATE TABLE DESTINATION 
(REF_DES NUMBER (10,0) NOT NULL,
NOM_DES VARCHAR2 (25 BYTE )
);

CREATE TABLE CLASSE 
(REF_CLA NUMBER (10,0) NOT NULL ENABLE, 
NOM_CLA VARCHAR2 (25 BYTE) NOT NULL 
);

CREATE TABLE TARIF 
(
REF_CLA_TAR NUMBER (10,0) NOT NULL ENABLE ,
REF_DES_TAR NUMBER (10,0) NOT NULL ENABLE,
PRIX_UNITAIRE_TAR NUMBER (10,0) NOT NULL ENABLE 
);

-----------------CLES PRIMAIRES

ALTER TABLE VOYAGE ADD CONSTRAINT PK_VOYAGE PRIMARY KEY (NU_VOY);
ALTER TABLE DESTINATION ADD CONSTRAINT PK_DESTINATION PRIMARY KEY (REF_DES);
ALTER TABLE CLASSE ADD CONSTRAINT PK_CLASSE PRIMARY KEY (REF_CLA);
ALTER TABLE TARIF ADD CONSTRAINT PK_TARIF PRIMARY KEY (REF_CLA_TAR,REF_DES_TAR);

--------------------CLEE EYTRANGERES-------------------------
ALTER TABLE VOYAGE 
ADD CONSTRAINT FK_VOYAGE_DESTINATION  FOREIGN KEY(REF_DES_VOY) REFERENCES DESTINATION (REF_DES); 

ALTER TABLE VOYAGE 
ADD CONSTRAINT FK_VOYAGE_CLASSE FOREIGN KEY (REF_CLA_VOY) REFERENCES CLASSE(REF_CLA);

ALTER TABLE TARIF 
ADD CONSTRAINT FK_TARIF_CLASSE  FOREIGN KEY(REF_CLA_TAR)  REFERENCES CLASSE (REF_CLA);
ALTER TABLE TARIF 
ADD CONSTRAINT FK_TARIF_DESTINATION FOREIGN KEY (REF_DES_TAR)  REFERENCES  DESTINATION (REF_DES);



--------------------------AFFICHAGE ---------------requ�te sql

---------------Dates de d�part des voyages � destination de VENISE----

SELECT DATE_DEPT_VOY 
FROM VOYAGE INNER JOIN DESTINATION ON VOYAGE.REF_DES_VOY=DESTINATION.REF_DES
WHERE DESTINATION.NOM_DES LIKE 'VENISE';

------------------Dates de d�part des voyages � destination de VENISE en classe LUXE
SELECT DATE_DEPT_VOY 
FROM DESTINATION INNER JOIN VOYAGE ON DESTINATION.REF_DES=VOYAGE.REF_DES_VOY
INNER JOIN CLASSE ON VOYAGE.REF_CLA_VOY=CLASSE.REF_CLA
WHERE DESTINATION.NOM_DES LIKE 'VENISE'
AND CLASSE.NOM_CLA LIKE 'LUXE';

------------------Nombre de participants et prix des voyages partant le 16/11/00

SELECT NBRE_PARTICIPANT_VOY,(PRIX_UNITAIRE_TAR *NBRE_PARTICIPANT_VOY) AS TOTAL 
FROM TARIF INNER JOIN DESTINATION  ON TARIF.REF_DES_TAR=DESTINATION.REF_DES
INNER JOIN VOYAGE ON DESTINATION.REF_DES=VOYAGE.REF_DES_VOY
WHERE DATE_DEPT_VOY='16/11/00';

----------------------VIOPERATEURS ENSEMBLISTES PLUS DIFFICILES A METTRE EN OEUVRE 
--------------------CREATION DES TABLES 

DROP TABLE AUTO1;

CREATE TABLE PROPRIETAIRE 
( NU_PRO NUMBER (10,0) NOT NULL ENABLE ,
NOM_PRO VARCHAR2 (25 BYTE) NOT NULL
);

CREATE TABLE AUTO1 
(NU_IMMT_AUT NUMBER (10,0) NOT NULL ENABLE,
NU_PRO_AUT NUMBER (10,0) NOT NULL ENABLE,
NU_MAR_AUT NUMBER (10,0) NOT NULL ENABLE,
COULEUR_AUT VARCHAR2 (25 BYTE) NOT NULL ENABLE 
);

CREATE TABLE MARQUE 
(NU_MAR NUMBER (10,0) NOT NULL,
NOM_MAR VARCHAR2 (25 BYTE) NOT NULL
);
 --------------CLES PRIMAIRES ------------
 ALTER TABLE PROPRIETAIRE ADD CONSTRAINT PK_PROPRIETAIRE  PRIMARY KEY (NU_PRO);
 ALTER TABLE AUTO1 ADD CONSTRAINT PK_AUTO1 PRIMARY KEY (NU_IMMT_AUT);
 ALTER TABLE MARQUE ADD CONSTRAINT PK_MARQUE PRIMARY KEY (NU_MAR); 
 --------------CLES ETRANGERES ----------
ALTER TABLE AUTO1 
ADD CONSTRAINT FK_AUTO1_PROPRIETAIRE FOREIGN KEY (NU_PRO_AUT) REFERENCES PROPRIETAIRE;

ALTER TABLE AUTO1 
ADD CONSTRAINT FK_AUTO1_MARQUE FOREIGN KEY (NU_MAR_AUT)  REFERENCES MARQUE(NU_MAR);


------------------------------------------------------------------------------
-------------------AFFICHAGR REQUETE-------------

----------------------------noms des propri�taires des autos blanches--------------

SELECT NOM_PRO 
FROM PROPRIETAIRE INNER JOIN  AUTO1 ON PROPRIETAIRE.NU_PRO=AUTO1.NU_PRO_AUT
WHERE AUTO1.COULEUR_AUT LIKE 'BLANCHE';

----------noms des propri�taires qui n�ont pas de CITROEN--------------
SELECT DISTINCT NOM_PRO 
FROM PROPRIETAIRE INNER JOIN  AUTO1 ON PROPRIETAIRE.NU_PRO=AUTO1.NU_PRO_AUT
INNER JOIN MARQUE ON AUTO1.NU_MAR_AUT=MARQUE.NU_MAR 
WHERE MARQUE.NOM_MAR <>'CITROEN';

------noms des propri�taires qui ont une CITROEN non blanche.

SELECT DISTINCT NOM_PRO 
FROM PROPRIETAIRE INNER JOIN  AUTO1 ON PROPRIETAIRE.NU_PRO=AUTO1.NU_PRO_AUT
INNER JOIN MARQUE ON AUTO1.NU_MAR_AUT=MARQUE.NU_MAR 
WHERE MARQUE.NOM_MAR LIKE 'CITROEN'
AND AUTO1.COULEUR_AUT <> 'BLANCHE';

-------------Noms des propri�taires qui ont une CITROEN blanche ou une RENAULT rouge.-----

SELECT DISTINCT NOM_PRO 
FROM PROPRIETAIRE INNER JOIN  AUTO1 ON PROPRIETAIRE.NU_PRO=AUTO1.NU_PRO_AUT
INNER JOIN MARQUE ON AUTO1.NU_MAR_AUT=MARQUE.NU_MAR 
WHERE MARQUE.NOM_MAR LIKE 'CITROEN' AND AUTO1.COULEUR_AUT LIKE 'BLANCHE'
OR   MARQUE.NOM_MAR LIKE 'RENAULT' AND AUTO1.COULEUR_AUT LIKE 'ROUGE';

---------------Quels propri�taires n�ont pas au moins une voiture de chaque marque -------------
--LE CONTRAIRE PROPRIETAIRE QUI ONT AU PLUS UNE VOITURE DE CHAQUE  MARQUE


SELECT DISTINCT NOM_PRO, COUNT(DISTINCT(MARQUE.NU_MAR)) AS NOMBRE_MARQUE
FROM PROPRIETAIRE 
INNER JOIN  AUTO1 ON PROPRIETAIRE.NU_PRO=AUTO1.NU_PRO_AUT
INNER JOIN MARQUE ON AUTO1.NU_MAR_AUT=MARQUE.NU_MAR
 GROUP BY  NOM_PRO   
HAVING COUNT(DISTINCT(MARQUE.NU_MAR))<(SELECT (COUNT(MARQUE.NU_MAR)) FROM MARQUE);


