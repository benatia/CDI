
 #####################################################
###########
####################### Algorithme 1 ############################

DEBUTPROCEDURE EchangerValeurs() 
	PARAMETRES 
	VARIABLES
		a,b,c  REELS
	DEBUT 
		AFFICHER "ENTRER 2  NOMBRES"
		SAISIR a
		SAISIR b
		c <- a
		a <- b
		b <- c
		AFFICHER a , b  
	FIN
FINPROCEDURE


#################################################################
####################### Algorithme 2 ############################

DEBUTFONCTION CalculerCarre()
	PARAMETRES a reel
	VARIABLES
	DEBUT
		RENVOYER a*a
	FIN
FINFONCTION 


#################################################################
####################### Algorithme 3 ############################


DEBUTPROCEDURE DefinirMention()
	PARAMETRES 
	VARIABLES
		NOTE :constante reel
		note_eleve  reel
	DEBUT  
		NOTE <- 10
		AFFICHER "entrer la note "
		SAISIR note_eleve
		SI (0<=note_eleve<=20) ALORS 
			SI (note_eleve<NOTE) ALORS
				AFFICHER "AJOURNEMENT"
			SINON
				AFFICHER "FELICITATION"
			FINSI
		SINON
			AFFICHER "VERIFIER LA SAISIE"
		FINSI 
	FIN
FINPROCEDURE 


#################################################################
####################### Algorithme 4 ############################


###################### Algorithme 4.1 ############################

DEBUTPROCEDURE CalculerValeurAbsolue()
	VARIABLES a,b reels
	DEBUT 
		AFFICHIER "ENTRER 2 REELS"
		SAISIR a
		SAISIR b
		SI (a<0)ALORS
			a <- -a
		FINSI
		SI (b<0)ALORS
			b <- -b
		FINSI
		AFFICHER " LES VALEURS ABSOLUES DE CES NOMBRES SONT " a , b
    FIN
FINPROCEDURE 


####################### Algorithme 4.2 ############################

DEBUTFONCTION CalculerValeurAbsolue(a,b reels) :reel 
	
	VARIABLES a,b reels
	DEBUT 
		SI (a<0)ALORS
			a <- -a
		FINSI
		SI (b<0)ALORS
			b <- -b
		FINSI
		RETOURNER( a , b)
	FIN
FINFONCTION
 

DEBUTPROCEDURE Principal(a ,b reels):reel
    DEBUT 
		AFFICHER("les valeurs absolues des nombres:  ", FONCTION CalculerValeurAbsolue(a,b reels) :reel  )
	FIN
FINPROCEDURE 



#################################################################
####################### Algorithme 5 ############################

DEBUTFONCTION CalculerAireCercle(r reels) :reel
	 
	VARIABLES  a reel
	CONSTANTE P=3.14 reel 
    DEBUT
		a <- P*r*r
		RETOURNER a
	FIN
	
FINFONCTION


DEBUTFONCTION CalculerVolumeCylindre()
	PARAMETRES r,h reels
	VARIABLES v reel
    DEBUT
		v <- ( CalculerAireCercle() PARAMETRE r )*h
		RETOURNER v
    FIN
	
FINFONCTION



#################################################################
####################### Algorithme 6 ############################




DEBUTPROCEDURE resoudreEquationPremierDegre()
		VARIABLES a, b reels  resultat chaine de caractères 
        DEBUT
			AFFICHER "ENTRER a et b"
			SAISIR a
			SAISIR b
			SI (a=0 et b =0) alors

				resultat <-"la solution est tous les nombres reels"   
			SINONSI(a=0 et b<>0 )

				resultat <-"la solution est tous les nombres reels"
			SINONSI (a=0 et b <>0)                      

				resultat <- "il n' y a pas de solutions "
			SINON(a<>0) alors
				resultat <- "la solution est ", b/a

			FINSI
		afficher (resultat)
        FIN
FINPROCEDURE




#################################################################
####################### Algorithme 7 ############################
Ecrire une procédure nommée ResoudreEquationSecondDegre() permettant de
résoudre une équation du second degré en utilisant la structure SI ALORS.
Equation du second degré : ax2+bx+c=0

####################### Algorithme 7.1 ############################

DEBUTFONCTION ResoudreEquationSecondDegre(a,b,c :entiers):String
	VARIABLE resultat :String ,d :entier
        DEBUT
			d <- b*b -(4*a*c)
			SI (d<0) ALORS 
				resultat <- " l'équation n'admet pas de solution réelle"
			SINONSI(d=0) ALORS 
				resultat <- "la solution est :  ",-b/2a
			SINONSI (d>0) ALORS
				resultat <- "l'equation a 2 solutions ",(-b-√d)/2*a ,(-b+√d)/2*a
			SINON ALORS 
				resultat<- "la saisie est incorrecte "
			FINSI
			RETOURNER (resultat)

        FIN
FINFONCTION

####################### Algorithme 7.2 ############################

DEBUTFONCTION ResoudreEquationSecondDegre(a,b,c :entiers) String
        DEBUT
			d <- b*b -4*a*c
			SELONQUE(d)
			(d<0) ALORS 
				resultat <- " L\'équation n'admet pas de solution réelle"
			(d=0) ALORS 
				resultat <- "la solution est :  ",-b/2a
			(d>0) ALORS
				resultat <- "l'equation a 2 solutions ",(-b-√d)/2*a ,(-b+√d)/2*a
			DEAULT ALORS 
				resultat<- "la saisie est incorrecte "
			FINSELONQUE
			RETOURNER  (resultat)

        FIN
FINFONCTION


#################################################################
####################### Algorithme 8 ############################
Ecrire une procédure nommée CalculerDureeVol() qui affiche la durée de vol en
heure et minute connaissant l’heure de départ et l’heure d’arrivée.


####################### Algorithme 8.1 ###########################
on considère que le départ et l’arrivée ont lieu le même jour.


DEBUTPROCEDURE CalculerDureeVol() 
	VARIABLES h_depart ,m_depart ,h_arrivee ,m_arrivee ,s ,s1   entiers duree String
	CONSTANTE H<- 60  ,J<-24
        DEBUT
		s<-(h_depart*H)+m_depart
		s1<-(h_depart*H)+m_depart
		duree <- (s1-s)/H, "h" , (s1-s)%H ,"min" 
        
		AFFICHER "LA DUREE EST DE ", duree 
	FIN
FINPROCEDURE


####################### Algorithme 8.2 ###########################
idem à l’algorithme 1 mais sans faire les conversions en minutes.


DEBUTPROCEDURE CalculerDureeVol() 
	VARIABLES h_depart ,m_depart ,h_arrivee ,m_arrivee ,s ,s1   entiers duree String
	CONSTANTE H<- 60  
        DEBUT
		s<-(h_arrivee-h_depart)
		s1<-(m_arrivee-m_depart)
		SI (m_arrivee<m_depart) ALORS
			s <- s-1
	        s1 <- s1+H
		FINSI
		duree <- s, "h" , s1 ,"min" 
		AFFICHER "LA DUREE ET DE ", duree 
	FIN
FINPROCEDURE


####################### Algorithme 8.3 ###########################
on suppose que la durée de vol est inférieure à 24 heures mais
que l’arrivée peut avoir lieu le lendemain.


DEBUTPROCEDURE CalculerDureeVol() 
/C  h_arrivee <- 24 +h_arrivee  =>  C/
	VARIABLES h_depart ,m_depart ,h_arrivee ,m_arrivee ,s ,s1   entiers duree chaine de caractère
	CONSTANTE H<- 60  ,J<-24
        DEBUT
		
		s <-h_arrivee-h_depart
		s1 <- m_arrivee-m_depart 
		SI (h_arrivee>h_depart) ET (m_arrivee<m_depart) ALORS
			s <- s-1
	        s1 <- s1+H
		SINONSI (h_arrivee<h_depart) ET (m_arrivee>m_depart) ALORS
			s <- s+J
		SINONSI (h_arrivee<h_depart) ET (m_arrivee<m_depart) ALORS
			S <- S+J-1
			S1 <- s1 +H
		SINON  ALORS
			s <- s
			s1 <- s1
		FINSI
		duree <- s, "h" , s1 ,"min" 
        
		AFFICHER "LA DUREE ET DE ", duree
	FIN 
FINPROCEDURE



#################################################################
####################### Algorithme 9 ############################

####################### Algorithme 9.1  ###########################
Ecrire une fonction nommée CalculerMax3() qui retourne le
maximum de trois entiers

DEBUTFONCTION CalculerMax3(a,b,c :entiers) :entier
        DEBUT
		
		SI a<b
			a <-b
	        FINSI
		SI (a <c)
			a <- c
		FINSI
		RETOURNER (a)
			
        FIN
FINFONCTION

####################### Algorithme 9.2  ###########################

une fonction nommée CalculerMin3() qui retourne le
minimum de trois entiers


DEBUTFONCTION CalculerMin3(a,b,c :entiers) :entier
    DEBUT
		
		SI a>b
			a <-b
        	FINSI
		SI (a>c)
			a <- c
		FINSI
		RETOURNER (a)
			
    FIN
FINFONCTION

####################### Algorithme 9.3  ###########################
Ecrire une fonction nommée CalculerMax2() qui retourne le
maximum de deux entiers

DEBUTFONCTION CalculerMax2(a,b:entiers):entier 
        DEBUT
		
		
		SI a<b
			a <-b
		FINSI
		RETOURNER (a)
			
        FIN
FINFONCTION


####################### Algorithme 9.4  ##########################

Ecrire une fonction nommée CalculerMax3() qui retourne le
maximum de trois entiers en faisant appel à CalculerMax2()


 
DEBUTFONCTION CalculerMax3(a,b,c :entiers) :entier
	
        DEBUT
		
		
		RETOURNER (calculerMax2(calculerMaxMx2(a,b),c))
			
        FIN
FINFONCTION
####################### Algorithme 10  ##########################

Ecrire avec des structures SI ALORS SINON une procédure nommée
DefinirMention() permettant la saisie d’une note n (0≤n≤20) et qui affiche une
mention en fonction des critères suivants :
 n≥16 : Très Bien
 n≥14 : Bien
 n≥12 : Assez Bien
 n≥10 : Passable
 n<10 : Ajourné

DEBUTPROCEDURE DefinirMention() 
	VARIABLE note entier 
	DEBUT 
		AFFICHER "ENTRER LA NOTE "
		SAISIR note 
		SI (0<=note<=20) ALORS 
			SI (note =>16) ALORS
				AFFICHER "Très Bien"
			SINONSI(note => 14) ALORS
				AFFICHER "Bien"

			SINONSI (note => 12) ALORS 
				AFFICHER "Assez Bien"
			SINONSI (notee=> 10) ALORS 
				FFICHER "Passable"
			SINON 
				AFICHER "Ajourné"
			FINSI
		SINON ALORS 
			AFFICHER "Verifier la saisie"
		FINSI
	FIN
FINPROCEDURE






DEBUTPROCEDURE DefinirMention() 
	VARIABLE note entier 
	DEBUT 
		AFFICHER "ENTRER LA NOTE "
		SAISIR note 
		SI (0<=note<=20) ALORS 
			SELONQUE 
				 (note =>16) ALORS
					AFFICHER "Très Bien"
				 (note => 14) ALORS
					AFFICHER "Bien"
				
				 (note => 12) ALORS 
					AFFICHER "Assez Bien"
				 (notee=> 10) ALORS 
					FFICHER "Passable"
				SINON 
					AFICHER "Ajourné"
			FINSELONQUE
		SINON ALORS 
			AFFICHER "Verifier la saisie"
		FINSI
	FIN
FINPROCEDURE



############################ ALGORITHME 11 #############################
Ecrire une procédure calculatrice nommée EffectuerOperation() permettant la
saisie de deux entiers et une opération ( +, - , / , x ) et affichant le résultat de
l’opération.
Attention à la division par zéro qui est impossible.


DEBUTPROCEDURE  EffectuerOperation()
		VARIABLE a b entier  choix, res  chaine de caractère
		DEBUT 
			AFFICHER "ENTRER 2 NOMBRES ENTIERS"
			SAISIR a 
			SAISIR b
			SAISIR choix
			SELONQUE 
				choix="+" ALORS
					res<- "la somme est  : ",a+b 
				choix="-"
					res<- "la soustraction est :" ,a-b
				choix="*" ALORS
					res <- "la miltiplication est :" ,a*b
				choix="/"
					SI (b=0) ALORS 
						res="impossible divisin par 0"
					SINON ALORS 
						res <- "la division est de ", a/
					FINSI
			FINSELONQUE
			AFFICHER (res)
		FIN
FIN PROCEDURE 





####################### Algorithme 13  ##########################

Ecrire une procédure EffectuerSomme() qui affiche la somme d’une suite d’entierssaisie par
 l’utilisateur se terminant par zéro. Quand l’utilisateur saisit 0 la somme est arrêtée et le résultat est affiché.

Exemple : l’utilisateur entre 1, puis 5, puis 2, puis 0
La procédure doit afficher : 8

DEBUTPROCEDURE  EffectuerSomme()
	VARIABLES nombre_saisi  somme :entiers 
	DEBUT
		somme <- 0
		AFFICHER "ENTRER LES NOMBRES"
		SAISIR nombre_saisi
		TANTQUE (nombre_saisie <>0) FAIRE
			somme <- somme +nombre_saisi
			AFFICHER "ENTRER UN NOTRE NOMBRE"
			SAISIR (nombre_saisi)
		FINTANTQUE
		AFFICHER (somme)
	FIN
FINPROCEDURE
		




####################### Algorithme 14   ##########################

Ecrire une procédure nommée CalculerMoyenne() qui affiche la moyenne d’une 
suite d’entiers se terminant par zéro. Le zéro n’entre pas en compte dans la 
moyenne. Il permet d’indiquer la fin de saisie.
Les entiers sont saisis par l’utilisateur.

DEBUTPROCEDURE  CalculerMoyenne()
	VARIABLE nombre_saisi ,i ,somme  :entiers
	DEBUT
		i <- 0
		somme <-0
		AFFICHER "ENTRER LE NOMBRE "
		SAISIR nombre_saisi
		TANTQUE (nombre_saisi <> 0) FAIRE
			i <- i+1
			somme <- somme +nombre_saisie
			AFFICHER "ENTRER UN AUTRE NOMBRE"
			SAISIR nombre_saisi
		FINTANTQUE
		AFFICHER "LA MOYENNE EST " ,somme/i
	FIN
FINPROCEDURE



####################### Algorithme 15  ##########################
Ecrire une procédure nommée VerifierSuiteEntiers() permettant la saisie d’une 
suite d’entiers se terminant par zéro et vérifier si cette suite contient deux
 entiers consécutifs égaux en utilisant les structures TANTQUE...FINTANTQUE.
Les entiers sont saisis par l’utilisateur.

DEBUTPROCEDURE  VerifierSuiteEntiers()
	VARIABLE nombre_sasi comparer :entier ok booleene
	DEBUT 
		AFFICHER "ENTRER UN NOMBRE"
		SAISIR nombre_saisi 
		comparer <- 0
		ok <- vrai
		TANTQUE (nombre_saisi <> 0) FAIRE
			SI (nombre_saisi = comparer) ALORS
				ok <- faux
			FINSI
			comparer <- nombre_saisi
			AFFICHER "ENTRER UN AUTRENOMBRE"
			SAISIR nombre_saisi
		FINTANTQUE
		SI (OK) ALORS 
			AFFICHER " cette suite ne contient pas deux entiers consécutifs égaux"
		SINON ALORS 

			AFFICHER " cette suite contient deux entiers consécutifs égaux"
		FINSI
	FIN
FINPROCEDURE 



/même procedure avec faire tanque /

DEBUTPROCEDURE  VerifierSuiteEntiers()
	VARIABLE nombre_sasi comparer :entier ok booleene
	DEBUT 
		AFFICHER "ENTRER UN NOMBRE"
		SAISIR nombre_saisi 
		comparer <- 0
		ok <- vrai
	    FAIRE		
			SI (nombre_saisi = comparer) ALORS
				ok <- faux
			FINSI
			comparer <- nombre_saisi
			AFFICHER "ENTRER UN AUTRENOMBRE" 
			SAISIR nombre_saisi
		TANTQUE (nombre_saisi <> 0) FAIRE
		SI (OK) ALORS 
			AFFICHER " cette suite ne contient pas deux entiers consécutifs égaux"
		SINON ALORS 

			AFFICHER " cette suite contient deux entiers consécutifs égaux"
		FINSI
	FIN
FINPROCEDURE 



###############################Algorithme 16 ########################################

Ecrire une procédure nommée CalculerMaxSuiteEntiers() qui affiche le maximum 
d’une suite se terminant par zéro.Les entiers sont saisis par l’utilisateur.I

DEBUTPROCEDURE CalculerMaxSuiteEntiers()
	VARIABLE nombre_sasi max :entier 
	DEBUT
		AFFICHER "ENTRER UN NOMBRE"
		SAISIR nombre_saisi 
		max <- nombre_saisi
		TANQUE(nombre_saisi <>0) FAIRE
			SI (max <nombre_saisi) ALORS
				max <- nombre_saisi
			FINSI
			AFFICHER "ENTRER UN NOMBRE"
	                SAISIR nombre_saisi
		FINTANQUE
		AFFICHET "le maximum de cette suite est " ,max
		
	FIN
FINPROCEDURE



###########################Algorithme 17 #################################

Ecrire une procédure nommée DevinerNombre() mettant en œuvre le jeu suivant :
Le premier utilisateur saisit un entier que le second doit deviner. Pour cela, 
il a le droit à autant de tentatives qu’il souhaite. A chaque échec, le 
programme lui indique si l’entier cherché est plus grand ou plus petit que sa 
proposition. 
 Un score indiquant le nombre de coups joués est mis à jour et affiché 
lorsque l’entier est trouvé.

DEBUTPROCEDURE DevinerNombre() 
	
	VARIABLE nombre_saisi, tentative , nombre_a_deviner: entiers
	DEBUT 
		AFFICHER "ENTRER LE NOMBRE A DEVINER"
		SAISIR nombre_a_deviner
		SAISIR nombr_saisi
		tentative <- 1
		
		TANQUE (nombre_a_deviner <> nombr_saisi) FAIRE
			tentative <- tentative+1
			SI (nombre_a_deviner > nombr_saisi) ALORS 
				AFFICHER "plus grand que ce nombre"
			SINON ALORS
				AFFICHER "plus petit que ce nombre"
			FINSI
			AFFICHER "ENTRER UN AUTRE NOMBRE"
			SAISI nombre_saisi
			
		FINTANQUE
		AFFICHER "BRAVO VOUS AVEZ GAGNE APRES " ,tentative,"tentatives"
	FIN
FINPROCEDURE




################################### ALGORITHME 18.1 ############################
Ecrire une procédure permettant de calculer le plus grand commun diviseur (PGCD) de deux
nombres en utilisant l’astuce suivante :
 soustraite le plus petit des deux entiers du plus grand jusqu'à ce qu’ils soient égaux'.
 
 DEBUTPROCEDURE calculerPgcd()
	VARIABLES  nombre1,nombre2 entier 
	DEBUT 
		LIRE nombre1 ,nombre2
		TANTQUE (nombre1-nombre2!=0) FAIRE
			SI (nombre1>nombre2) ALORS
				nombre1<- nombre1-nombre2
			SINON
				 nombre2<- nombre2-nombre1
		FINTANTQUE 
		AFFICHER (nombre1-nombre2)
	FIN 
FINPROCEDURE

################################### ALGORITHME 18.2 ############################
Même programme avec l’algorithme d’Euclide et une structure TANTQUE…FINTANTQUE.


//TANTQUE…FAIRE
 DEBUTPROCEDURE calculerPgcd()
	VARIABLES  a,b r entier 
	DEBUT
		LIRE a ,b
	    TANTQUE (b <>0) FAIRE 
			r <- a modulo b
			a <-  b
			b <- r
			
		FINTANTQUE
		AFFICHER (a)
	FIN
FINPROCEDURE
################################### ALGORITHME 18.3 ############################

//FAIRE.......... TANTQUE
DEBUTPROCEDURE calculerPgcd()
	VARIABLES  a,b r entier 
	DEBUT
		LIRE a ,b
	    FAIRE 
			r <- a modulo b
			a <-  b
			b <- r
		TANTQUE (b <>0) 
			
	
		AFFICHER (a)
	FIN
FINPROCEDURE



 
 
###################################ALGORITHME 19  ############################

Ecrire avec la structure POUR...FINPOUR une procédure nommée CalculerSomme()
qui permet de faire la somme d’une suite de nombre entrée par l’utilisateur.
###################################ALGORITHME 19  ############################
Ecrire la procédure en comptant par pas de 1.
Algorithme 19.2 : Ecrire la procédure en comptant par pas de –1.

DEBUTPROCEDURE CalculerSomme()
	VARIABLE  nombre_des_entier nombre_saisi i somme :entiers
	
	DEBUT 
		AFFICHER "COMBIEN DE NOMBRE VOULEZ VOUS ENTRER "
		SAISIR nombre_des_entiers
		somme <- 0
		POUR i ALLANT DE 1 A nombre_des_entiers PAS DE 1  FAIRE
			AFFICHER "ENTRER LE NOMBRE N°",i
			SAISIR nombr_saisi
			somme<- somme+nombre_saisi
		FINPOUR
		AFFICHER "la somme est " ,somme
	FIN
FINPROCEDURE


###################################  ALGORITHME 19  ############################
Ecrire la procédure en comptant par pas de –1.

PROCEDURE CalculerSomme()
	VARIABLE  nombre_des_entier nombre_saisi i somme :entiers
	
	DEBUT 
		AFFICHER "COMBIEN DE NOMBRE VOULEZ VOUS ENTRER "
		SAISIR nombre_des_entiers
		somme <- 0
		POUR i ALLANT DE nombre_des_entiers A 1 PAS DE -1  FAIRE
			AFFICHER "ENTRER LE NOMBRE "
			SAISIR nombr_saisi
			somme<- somme+nombre_saisi
		FINPOUR
		AFFICHER "la somme est " ,somme
	FIN
FINPROCEDURE
###################################ALGORITHME 20  ############################

Traduire la structure POUR…FINPOUR de la procédure suivante en structure FAIRE…TANTQUE.
DEBUTPROCEDURE AfficherListe
	k, nb : entier
	DEBUT
		Lire (nb)
		POUR k DE 1 A nb FAIRE
			Ecrire (k)
		FINPOUR
	FIN
FINPROCEDUR 

DEBUTPROCEDURE AfficherListe
	VARIABLE k, nb : entier
	DEBUT 
		k<-1
		FAIRE (Ecrire (k))
			k<-k+1
		TANQUE(k<+nb)
	FIN
FINPROCEDUR

###################################ALGORITHME 21 ############################

Algorithme 21
Ecrire une fonction nommée CalculerSommeIntervalle() qui fait la somme des entiers 
compris dans un intervalle. Les 2 entiers composant l’intervalle sont passés en 
paramètre de la fonction.

DEBUTFONCTION CalculerSommeIntervalle()
	PARAMETRES a ,b somme :entiers  
	DEBUE
		somme<-0
		TANTQUE (a<= b) FAIRE
			somme <-somme +a
			a<- a+1
		FINTANQUE
		RETOURNER (somme)
	
	FIN 
FINFONCTION 

################################# ALGORITHME 22 ###################################
Ecrire une fonction nommée Multiplier() qui permet la multiplication de 2 entiers par 
additions successives.Les 2 entiers sont passés en paramètre de la fonction.

DEBUTFONCTION Multiplier() 
	PARAMETRE a ,b :entiers
	VARIABLE m,somme entiers
	DEBUT
		somme <- 0
		POUR m ALLANT DE 1 A a
			somme <- somme + b
		FINPOUR
		RETOURNER (somme)
	FIN
FINFONCTION

############################## ALGORITHME 23 ###################################
Ecrire une procédure nommée SaisirTableauCroissant() qui permet la saisie d’un tableau croissant.
 si T[k] < T[k+1] vous enregistrez
 si T[k] > T[k+1] vous redemandez la saisie d’un nombre plus grand

DEBUTPROCEDURE SaisirTableauCroissant()
	VARIABLE ENTIER [n] matable : table des entiers  nombre_saisi i  entier
	DEBUT
		SAISIR n
		SAISIR nombre_saisi
		i<-0
		j <- 0
		matable[i]<-nombr_saisi
			TANTQUE (i <= n-1 ) FAIRE
				SAISIR nombre_saisi
				SI(nombre_saisi> matable[i]) ALORS
					matable[i+1]=nombre-saisi
					i<- i+1
				SINON
					AFFICHER "entrer un nombre plus grand "
				FINSI
				j<- j+1

			FINTANTQUE
		
	FIN
FINPROCEDURE
	
###################################### Algorithme 24 #########################
###################################### Algorithme 24 .1 #########################

 Ecrire une fonction nommée CalculerMaximum() retournant le maximum d’un tableau de taille n.
 Le tableau et la taille du tableau sont passés en paramètre de la fonction
 
DEBUTFONCTION  CalculerMaximum() 
	PARAMETRE entier[] matable : table des entiers  n ,i max  entiers 
	DEBUT
		i<-0
		max <- matable[i]
		 FAIRE	
			i=i+1
			SI (matable[i+1]>max
				max <- matable[i+1]
				i<-i+1
			FINSI 
		TANTQUE (i<=n)
		RETOURNER (max)
	FIN
FINFONCTION

############################################# Algorithme 24.2 ######################			
Ecrire le même algorithme qui ne retourne que l’indice de la case du tableau 
contenant le maximum du tableau.

DEBUTFONCTION  CalculerMaximumIndice() 
	PARAMETRE entier[] matable : table des entiers  n ,i max  entiers 
	VARIABLE j
	DEBUT
		i<-0
		max <- matable[i]
		j <- i
		TANTQUE (i<=n) FAIRE	
			i=i+1
			SI (matable[i]>max
				max <- matable[i]
				j <- i
			FINSI 
		FINTANTQUE
		AFFICHER (j)
	FIN
FINFONCTION

#################################Algorithme 25 ####################################################
Ecrire une procédure nommée AfficherTableau() qui affiche à l’écran le contenu d’un tableau.
Ecrire la procédure nommée Principale() qui remplit le tableau et appelle la procédure AfficherTableau() 
pour afficher le contenu du tableau passé en paramètre.

DEBUTPROCEDURE AfficherTableau(entier [n] matable tableau des entiers )
	//n le longueur du tableau 
	VARIABLE i entier 
	DEBUT
		POUR i allant de 0 A n PAS DE 1  FAIRE 
			AFFICHER matable[i]
		FINPOUR
	FIN
FINPROCEDURE

DEBUTPROCEDURE Principale ( )
	VARIABLE nombr_saisi,i  ENTIER ,entiers [n] matable:tableau des ENTIERS de longueur n 
	DEBUT
		i <- 0
		
		TANTQUE(i<=n) FAIRE
			AFFICHER "ENTRER UNE VALEUR"
			SAISIR nombre-saisi
			matable[i]<-nombr_saisi 
			i <- i+1
		FINTANTQUE
		AfficherTableau(matable[n])
		
	FIN
FINPROCEDURE 


############################## Algorithme 26 #######################################
Ecrire une procédure nommée SaisirTableau() qui permet la saisie d’un tableau. 
Ecrire une procédure nommée Principale() qui permet :
● dans un 1er temps d’accéder à la procédure SaisirTableau(),
● dans un 2ème temps d’afficher le résultat à l’aide de la procédure AfficherTableau() de l’algorithme 25.

DEBUTPROCEDURE SaisirTableau():TABLEAU DES ENTIER 
	VARIABLE  entiers [n] matable tableau de longueur n 
    DEBUT 
		AFFICHER "ENTER LA LONGUEUR  DE VOTRE TABLEAU"
		SAISIR n 
		RETOURNER entiers[n]matable
	FIN
	
	
FINPROCEDURE
DEBUTPROCEDURE Principale()
	
	DEBUT
	SaisirTableau()
	AfficherTableau(entier [] matable : tableau des entiers ,n : entier)
	FIN
FINPROCEDURE

#################################################################################
###########################Algorithme 27######################################
Ecrire une fonction nommée CalculerInversion() qui calcule et retourne
le nombre d’inversion d’un tableau de taille p_taille, c’est à dire 
i<j et tab[i]>tab[j] pour tout i et j.

DEBUTFONCTION  Cal culerInversion(entiers[p_taille] matable :tableau de taille p_taille) 
	VARIABLE  nombre1 , nombre2,somme entiers
	nombre2 <-0
	echange <- 0
	somme <-0
	DEBUT
		POUR nombre1 allant de 1 A n FAIRE
			TANTQUE (nombre2<nombre1) FAIRE
				SI (matable[nombre2]>matable[nombre2]) ALORS
					echange <- matable[nombre2]
					matable[nombre2] <- matable[nombre1]
					matable[nombre1] <- echange
					somme <- somme+1
				FINSI
			FINTANTQUE
			RETOURNER SOMME
			
					
			
	FIN
FINFONCTION

#############################################################################
###########################Algorithme 28######################################

DEBUTPROCEDURE GetTypeAvion (p_codeAvion)
		SELECT CARACTERISTIQUE FROM Tableau1 inner join Tableau2
		WHERE CodeAvion = p_codeAvion
FINPROCEDURE



DEBUTPROCEDURE GetStatistique(p_codeAvion)
		SELECT CARACTERISTIQUE FROM AVION 
		WHERE CodeAvion = p_codeAvion
FINPROCEDURE




	

	
	
